{"ast":null,"code":"// loadware.js - Turn different middleware descriptors into an array of middleware\nrequire('app-module-path').addPath(process.cwd());\n\n// Put it all into a single array of non-arrays recursively\n// ['a', ['b', ['c', ...]]] => ['a', 'b', 'c', ...]\nlet flat = arr => arr.reduce((good, one) => {\n  let flatten = Array.isArray(one) ? flat(one) : one || [];\n  return good.concat(flatten);\n}, []);\n\n// Fetches the absolute path from the root\n// ['a', 'b'] => [require('a'), require('b')]\n// Note: this doesn't work: 'require(mid)'\nlet include = mid => typeof mid === 'string' ? require(require('path').resolve(mid)) : mid;\n\n// Throw an error if there's something that is not a function anymore\n// [{ a: 'b' }] => throw new Error();\nlet others = mid => {\n  if (mid instanceof Function) return mid;\n  throw new Error(\"Only boolean, string, array or function can be middleware\");\n};\n\n// The actual glue for them all\nmodule.exports = (...middle) => flat(middle).map(include).filter(others);","map":{"version":3,"names":["require","addPath","process","cwd","flat","arr","reduce","good","one","flatten","Array","isArray","concat","include","mid","resolve","others","Function","Error","module","exports","middle","map","filter"],"sources":["/home/lillian/node_modules/loadware/loadware.js"],"sourcesContent":["// loadware.js - Turn different middleware descriptors into an array of middleware\nrequire('app-module-path').addPath(process.cwd());\n\n// Put it all into a single array of non-arrays recursively\n// ['a', ['b', ['c', ...]]] => ['a', 'b', 'c', ...]\nlet flat = arr => arr.reduce((good, one) => {\n  let flatten = Array.isArray(one) ? flat(one) : one || [];\n  return good.concat(flatten)\n}, []);\n\n// Fetches the absolute path from the root\n// ['a', 'b'] => [require('a'), require('b')]\n// Note: this doesn't work: 'require(mid)'\nlet include = mid => typeof mid === 'string'\n  ? require(require('path').resolve(mid))\n  : mid;\n\n// Throw an error if there's something that is not a function anymore\n// [{ a: 'b' }] => throw new Error();\nlet others = mid => {\n  if (mid instanceof Function) return mid;\n  throw new Error(\"Only boolean, string, array or function can be middleware\");\n}\n\n// The actual glue for them all\nmodule.exports = (...middle) => flat(middle).map(include).filter(others);\n"],"mappings":"AAAA;AACAA,OAAO,CAAC,iBAAiB,CAAC,CAACC,OAAO,CAACC,OAAO,CAACC,GAAG,CAAC,CAAC,CAAC;;AAEjD;AACA;AACA,IAAIC,IAAI,GAAGC,GAAG,IAAIA,GAAG,CAACC,MAAM,CAAC,CAACC,IAAI,EAAEC,GAAG,KAAK;EAC1C,IAAIC,OAAO,GAAGC,KAAK,CAACC,OAAO,CAACH,GAAG,CAAC,GAAGJ,IAAI,CAACI,GAAG,CAAC,GAAGA,GAAG,IAAI,EAAE;EACxD,OAAOD,IAAI,CAACK,MAAM,CAACH,OAAO,CAAC;AAC7B,CAAC,EAAE,EAAE,CAAC;;AAEN;AACA;AACA;AACA,IAAII,OAAO,GAAGC,GAAG,IAAI,OAAOA,GAAG,KAAK,QAAQ,GACxCd,OAAO,CAACA,OAAO,CAAC,MAAM,CAAC,CAACe,OAAO,CAACD,GAAG,CAAC,CAAC,GACrCA,GAAG;;AAEP;AACA;AACA,IAAIE,MAAM,GAAGF,GAAG,IAAI;EAClB,IAAIA,GAAG,YAAYG,QAAQ,EAAE,OAAOH,GAAG;EACvC,MAAM,IAAII,KAAK,CAAC,2DAA2D,CAAC;AAC9E,CAAC;;AAED;AACAC,MAAM,CAACC,OAAO,GAAG,CAAC,GAAGC,MAAM,KAAKjB,IAAI,CAACiB,MAAM,CAAC,CAACC,GAAG,CAACT,OAAO,CAAC,CAACU,MAAM,CAACP,MAAM,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}