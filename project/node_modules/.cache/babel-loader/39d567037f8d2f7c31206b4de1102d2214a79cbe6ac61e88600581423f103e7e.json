{"ast":null,"code":"const path = require('path');\nconst fs = require('mz/fs');\nconst Reply = function (name, ...args) {\n  this.stack = [];\n  this[name](...args);\n  return this;\n};\nReply.prototype.cookie = function (...args) {\n  this.stack.push(ctx => {\n    ctx.res.cookie(...args);\n  });\n  return this;\n};\nReply.prototype.download = function (...args) {\n  // Guard clauses\n  if (args.length < 1) {\n    throw new Error('download() expects a path as the first argument');\n  }\n  if (args.length < 2) {\n    throw new Error('download() expects a filename as the second argument');\n  }\n  if (args.length > 2) {\n    throw new Error('download() only expects two arguments, path and filename. The rest of them will be ignored');\n  }\n  let [file, opts] = args;\n  if (!path.isAbsolute(file)) {\n    file = path.resolve(process.cwd(), file);\n  }\n  this.stack.push(async ctx => {\n    if (!(await fs.exists(file))) {\n      throw new Error(`The file \"${file}\" does not exist. Make sure that you set an absolute path or a relative path to the root of your project`);\n    }\n    return new Promise((resolve, reject) => {\n      ctx.res.download(file, opts, err => err ? reject(err) : resolve());\n    });\n  });\n  return this;\n};\nReply.prototype.end = function () {\n  this.stack.push(ctx => {\n    ctx.res.end();\n  });\n  return this;\n};\nReply.prototype.file = function (...args) {\n  // Guard clauses\n  if (args.length < 1) {\n    throw new Error('file() expects a path as the first argument');\n  }\n  if (args.length > 2) {\n    throw new Error(`file() only expects two arguments, the path and options, but ${args.length} were provided.`);\n  }\n  let [file, opts = {}] = args;\n  if (!path.isAbsolute(file)) {\n    file = path.resolve(process.cwd(), file);\n  }\n  this.stack.push(async ctx => {\n    if (!(await fs.exists(file))) {\n      throw new Error(`The file \"${file}\" does not exist. Make sure that you set an absolute path or a relative path to the root of your project`);\n    }\n    return new Promise((resolve, reject) => {\n      ctx.res.sendFile(file, opts, err => err ? reject(err) : resolve());\n    });\n  });\n  return this;\n};\nReply.prototype.header = function (...args) {\n  this.stack.push(ctx => {\n    ctx.res.header(...args);\n  });\n  return this;\n};\nReply.prototype.json = function (...args) {\n  this.stack.push(ctx => {\n    ctx.res.json(...args);\n  });\n  return this;\n};\nReply.prototype.jsonp = function (...args) {\n  this.stack.push(ctx => {\n    ctx.res.jsonp(...args);\n  });\n  return this;\n};\nReply.prototype.redirect = function (...args) {\n  this.stack.push(ctx => {\n    ctx.res.redirect(...args);\n  });\n  return this;\n};\nReply.prototype.render = function (...args) {\n  // Guard clauses\n  if (args.length < 1) {\n    throw new Error('file() expects a path');\n  }\n  if (args.length > 2) {\n    throw new Error('file() expects a path and options but nothing else');\n  }\n  let [file, opts = {}] = args;\n  this.stack.push(ctx => new Promise((resolve, reject) => {\n    // Note: if callback is provided, it does not send() automatically\n    const cb = (err, html) => err ? reject(err) : resolve(ctx.res.send(html));\n    ctx.res.render(file, opts, cb);\n  }));\n  return this;\n};\nReply.prototype.send = function (...args) {\n  // If we are trying to send the context\n  if (args[0] && args[0].close && args[0].close instanceof Function) {\n    throw new Error('Never send the context, request or response as those are a security risk');\n  }\n  this.stack.push(ctx => {\n    ctx.res.send(...args);\n  });\n  return this;\n};\nReply.prototype.status = function (...args) {\n  this.stack.push(ctx => {\n    // In case there is no response, it'll respond with the status\n    ctx.res.explicitStatus = true;\n    ctx.res.status(...args);\n  });\n  return this;\n};\nReply.prototype.type = function (...args) {\n  this.stack.push(ctx => {\n    ctx.res.type(...args);\n  });\n  return this;\n};\nReply.prototype.exec = async function (ctx) {\n  for (let cb of this.stack) {\n    await cb(ctx);\n  }\n  this.stack = [];\n};\n\n// This will make that the first time a function is called it starts a new stack\nmodule.exports = Reply;","map":{"version":3,"names":["path","require","fs","Reply","name","args","stack","prototype","cookie","push","ctx","res","download","length","Error","file","opts","isAbsolute","resolve","process","cwd","exists","Promise","reject","err","end","sendFile","header","json","jsonp","redirect","render","cb","html","send","close","Function","status","explicitStatus","type","exec","module","exports"],"sources":["/home/lillian/node_modules/server/reply/reply.js"],"sourcesContent":["const path = require('path');\nconst fs = require('mz/fs');\n\n\nconst Reply = function (name, ...args) {\n  this.stack = [];\n  this[name](...args);\n  return this;\n};\n\n\n\nReply.prototype.cookie = function (...args) {\n  this.stack.push(ctx => {\n    ctx.res.cookie(...args);\n  });\n  return this;\n};\n\n\n\nReply.prototype.download = function (...args) {\n\n  // Guard clauses\n  if (args.length < 1) {\n    throw new Error('download() expects a path as the first argument');\n  }\n\n  if (args.length < 2) {\n    throw new Error('download() expects a filename as the second argument');\n  }\n\n  if (args.length > 2) {\n    throw new Error('download() only expects two arguments, path and filename. The rest of them will be ignored');\n  }\n\n  let [file, opts] = args;\n  if (!path.isAbsolute(file)) {\n    file = path.resolve(process.cwd(), file);\n  }\n\n  this.stack.push(async ctx => {\n    if (!await fs.exists(file)) {\n      throw new Error(`The file \"${file}\" does not exist. Make sure that you set an absolute path or a relative path to the root of your project`);\n    }\n    return new Promise((resolve, reject) => {\n      ctx.res.download(file, opts, err => err ? reject(err) : resolve());\n    });\n  });\n\n  return this;\n};\n\n\n\nReply.prototype.end = function () {\n  this.stack.push(ctx => {\n    ctx.res.end();\n  });\n  return this;\n};\n\n\n\nReply.prototype.file = function (...args) {\n\n  // Guard clauses\n  if (args.length < 1) {\n    throw new Error('file() expects a path as the first argument');\n  }\n\n  if (args.length > 2) {\n    throw new Error(`file() only expects two arguments, the path and options, but ${args.length} were provided.`);\n  }\n\n  let [file, opts = {}] = args;\n  if (!path.isAbsolute(file)) {\n    file = path.resolve(process.cwd(), file);\n  }\n\n  this.stack.push(async ctx => {\n    if (!await fs.exists(file)) {\n      throw new Error(`The file \"${file}\" does not exist. Make sure that you set an absolute path or a relative path to the root of your project`);\n    }\n    return new Promise((resolve, reject) => {\n      ctx.res.sendFile(file, opts, err => err ? reject(err) : resolve());\n    });\n  });\n\n  return this;\n};\n\n\n\nReply.prototype.header = function (...args) {\n  this.stack.push(ctx => {\n    ctx.res.header(...args);\n  });\n  return this;\n};\n\nReply.prototype.json = function (...args) {\n  this.stack.push(ctx => {\n    ctx.res.json(...args);\n  });\n  return this;\n};\n\nReply.prototype.jsonp = function (...args) {\n  this.stack.push(ctx => {\n    ctx.res.jsonp(...args);\n  });\n  return this;\n};\n\nReply.prototype.redirect = function (...args) {\n  this.stack.push(ctx => {\n    ctx.res.redirect(...args);\n  });\n  return this;\n};\n\nReply.prototype.render = function (...args) {\n\n  // Guard clauses\n  if (args.length < 1) {\n    throw new Error('file() expects a path');\n  }\n\n  if (args.length > 2) {\n    throw new Error('file() expects a path and options but nothing else');\n  }\n\n  let [file, opts = {}] = args;\n\n  this.stack.push(ctx => new Promise((resolve, reject) => {\n    // Note: if callback is provided, it does not send() automatically\n    const cb = (err, html) => err ? reject(err) : resolve(ctx.res.send(html));\n    ctx.res.render(file, opts, cb);\n  }));\n  return this;\n};\n\nReply.prototype.send = function (...args) {\n\n  // If we are trying to send the context\n  if (args[0] && args[0].close && args[0].close instanceof Function) {\n    throw new Error('Never send the context, request or response as those are a security risk');\n  }\n\n  this.stack.push(ctx => {\n    ctx.res.send(...args);\n  });\n  return this;\n};\n\nReply.prototype.status = function (...args) {\n  this.stack.push(ctx => {\n    // In case there is no response, it'll respond with the status\n    ctx.res.explicitStatus = true;\n    ctx.res.status(...args);\n  });\n  return this;\n};\n\nReply.prototype.type = function (...args) {\n  this.stack.push(ctx => {\n    ctx.res.type(...args);\n  });\n  return this;\n};\n\nReply.prototype.exec = async function (ctx) {\n  for (let cb of this.stack) {\n    await cb(ctx);\n  }\n  this.stack = [];\n};\n\n// This will make that the first time a function is called it starts a new stack\nmodule.exports = Reply;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}